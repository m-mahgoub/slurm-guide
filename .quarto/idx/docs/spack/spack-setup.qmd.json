{"title":"Spack Setup","markdown":{"yaml":{"title":"Spack Setup","engine":"knitr"},"headingText":"Overview","containsRefs":false,"markdown":"\n\nThis guide explains how to set up a site installation of Spack as a non-root user. It assumes that you already have a working installation of Spack on your system, either system-wide or in a user directory. If Spack is not installed, please refer to the official [Spack Installation Guide](https://spack-tutorial.readthedocs.io/en/latest/tutorial_basics.html#installing-spack).\n\nWhile this guide is tailored for WashU RIS HPC (Compute2) users, it can be adapted for other systems.\n\n## Verify Spack Installation\nBefore proceeding, ensure that Spack is installed on your system and that the `spack` command is accessible.\n\nSpack is installed as a module on RIS Compute2. Therefore, you need to load the Spack module to access the `spack` command:\n\n```bash\n# Start an interactive SLURM session\nsrun --time=\"4:00:00\" --nodes=1 --ntasks=4 --mem=24G --pty /bin/bash\n\n# Load the Spack module\nmodule load ris spack\n\n# Verify the Spack installation\nspack --version\n```\n\n:::{.callout-note}\nYou need to load the Spack module using `module load ris spack` in the RIS current module system. Only after loading `ris` can you expose the `spack` module.\n:::\n\n## Environment Setup\nBy default, Spack installs packages in either the system-wide installation directory or the user's home directory (`~/.spack`). However, it is often preferable to have a site installation of Spack that:\n\n- Can be shared by multiple users.\n- Allows non-root users to have write access.\n- Is independent of changes in individual users' home directories.\n\nSpack supports setting up an \"isolated\" site installation that meets these requirements. This is achieved by customizing Spack's [configuration scopes](https://spack.readthedocs.io/en/latest/configuration.html) and setting specific [environment variables](https://spack.readthedocs.io/en/latest/configuration.html#overriding-local-configuration).\n\n## Step-by-Step Spack Setup\nFollow these steps to set up Spack for a user-specific installation.\n\n### 1. Set Environment Variables\nDefine the paths for Spack installation and cache. These paths determine where Spack will store its software and temporary files.\n\n```bash\nexport SPACK_USER_INSTALL_PATH=/storage2/fs1/dspencer/Active/spencerlab/app/modules/spack\nexport SPACK_USER_CACHE_PATH=/storage2/fs1/dspencer/Active/spencerlab/app/modules/spack/.cache\n```\n\n- `SPACK_USER_INSTALL_PATH`: The directory where Spack will install software and environments.\n- `SPACK_USER_CACHE_PATH`: The directory for temporary files, such as build stages and caches.\n\n### 2. Create the Spack User Directory\nEnsure the `~/.spack` directory exists. This directory will store user-specific Spack configuration files.\n\n```bash\nmkdir -p ~/.spack\n```\n\n### 3. Create the Spack Configuration File\nWrite the `config.yaml` file to configure Spack's installation paths and cache locations.\n\n```bash\ncat <<EOF > ~/.spack/config.yaml\nconfig:\n  install_tree:\n    root: ${SPACK_USER_INSTALL_PATH}/software\n  environments_root: ${SPACK_USER_INSTALL_PATH}/environments\n  build_stage:\n    - ${SPACK_USER_CACHE_PATH}/stage\n  test_stage: ${SPACK_USER_CACHE_PATH}/test\n  source_cache: ${SPACK_USER_CACHE_PATH}/source_cache\n  misc_cache: ${SPACK_USER_CACHE_PATH}/misc_cache\nEOF\n```\n\n- `install_tree`: Specifies where Spack will install software.\n- `environments_root`: Defines the location for Spack environments.\n- `build_stage`, `test_stage`, `source_cache`, `misc_cache`: Configure paths for temporary files and caches.\n\n### 4. Create the Spack Modules Configuration File\nWrite the `modules.yaml` file to configure how Spack generates module files.\n\n```bash\ncat <<EOF > ~/.spack/modules.yaml\nmodules:\n  default:\n    roots:\n      tcl: ${SPACK_USER_INSTALL_PATH}/modules\n    enable:\n      - tcl\n    tcl:\n      projections:\n        all: '{name}/{version}'\n      hide_implicits: true\n      all:\n        autoload: direct\n      include:\n        - cowsay\n      exclude: \n        - '%gcc@13.1.0'\n      hash_length: 0\nEOF\n```\n\n:::{.callout-note}\nThe `include` and `exclude` options allow you to control which packages are included or excluded from module generation. For example:\n\n- `include`: Specifies a list of packages to always generate modules for.\n- `exclude`: Specifies a list of packages to never generate modules for.\n\nIn the example above:\n\n- `include: cowsay` ensures that a module is always generated for the `cowsay` package.\n- `exclude: '%gcc@13.1.0'` prevents modules from being generated for packages built with GCC version 13.1.0.\n:::\n\n- `roots`: Specifies the root directory for module files.\n- `projections`: Defines the directory structure for module files.\n- `autoload`: Automatically loads dependencies when a module is loaded.\n- `include` and `exclude`: Control which packages are included or excluded from module generation.\n\n### 5. Confirm the Spack Configuration\nAfter creating the configuration files, confirm that Spack is using the correct paths and settings.\n\nYou can check the current Spack configuration by running:\n\n```{bash}\nspack config get config\n```\n\nTo check the module configuration, run:\n\n```{bash}\nspack config get modules\n```\n\nThis command should display the paths and settings you specified in the `config.yaml` and `modules.yaml` files.\n\nAnother useful command is `spack config blame`, which shows the source of each configuration setting. This can help you identify where specific settings are coming from, especially if you have multiple configuration files or scopes.\n\n```{bash}\nspack config blame\n```\n\nThis command will display the source of each configuration setting, allowing you to verify that your custom settings are being applied correctly.","srcMarkdownNoYaml":"\n\n## Overview\nThis guide explains how to set up a site installation of Spack as a non-root user. It assumes that you already have a working installation of Spack on your system, either system-wide or in a user directory. If Spack is not installed, please refer to the official [Spack Installation Guide](https://spack-tutorial.readthedocs.io/en/latest/tutorial_basics.html#installing-spack).\n\nWhile this guide is tailored for WashU RIS HPC (Compute2) users, it can be adapted for other systems.\n\n## Verify Spack Installation\nBefore proceeding, ensure that Spack is installed on your system and that the `spack` command is accessible.\n\nSpack is installed as a module on RIS Compute2. Therefore, you need to load the Spack module to access the `spack` command:\n\n```bash\n# Start an interactive SLURM session\nsrun --time=\"4:00:00\" --nodes=1 --ntasks=4 --mem=24G --pty /bin/bash\n\n# Load the Spack module\nmodule load ris spack\n\n# Verify the Spack installation\nspack --version\n```\n\n:::{.callout-note}\nYou need to load the Spack module using `module load ris spack` in the RIS current module system. Only after loading `ris` can you expose the `spack` module.\n:::\n\n## Environment Setup\nBy default, Spack installs packages in either the system-wide installation directory or the user's home directory (`~/.spack`). However, it is often preferable to have a site installation of Spack that:\n\n- Can be shared by multiple users.\n- Allows non-root users to have write access.\n- Is independent of changes in individual users' home directories.\n\nSpack supports setting up an \"isolated\" site installation that meets these requirements. This is achieved by customizing Spack's [configuration scopes](https://spack.readthedocs.io/en/latest/configuration.html) and setting specific [environment variables](https://spack.readthedocs.io/en/latest/configuration.html#overriding-local-configuration).\n\n## Step-by-Step Spack Setup\nFollow these steps to set up Spack for a user-specific installation.\n\n### 1. Set Environment Variables\nDefine the paths for Spack installation and cache. These paths determine where Spack will store its software and temporary files.\n\n```bash\nexport SPACK_USER_INSTALL_PATH=/storage2/fs1/dspencer/Active/spencerlab/app/modules/spack\nexport SPACK_USER_CACHE_PATH=/storage2/fs1/dspencer/Active/spencerlab/app/modules/spack/.cache\n```\n\n- `SPACK_USER_INSTALL_PATH`: The directory where Spack will install software and environments.\n- `SPACK_USER_CACHE_PATH`: The directory for temporary files, such as build stages and caches.\n\n### 2. Create the Spack User Directory\nEnsure the `~/.spack` directory exists. This directory will store user-specific Spack configuration files.\n\n```bash\nmkdir -p ~/.spack\n```\n\n### 3. Create the Spack Configuration File\nWrite the `config.yaml` file to configure Spack's installation paths and cache locations.\n\n```bash\ncat <<EOF > ~/.spack/config.yaml\nconfig:\n  install_tree:\n    root: ${SPACK_USER_INSTALL_PATH}/software\n  environments_root: ${SPACK_USER_INSTALL_PATH}/environments\n  build_stage:\n    - ${SPACK_USER_CACHE_PATH}/stage\n  test_stage: ${SPACK_USER_CACHE_PATH}/test\n  source_cache: ${SPACK_USER_CACHE_PATH}/source_cache\n  misc_cache: ${SPACK_USER_CACHE_PATH}/misc_cache\nEOF\n```\n\n- `install_tree`: Specifies where Spack will install software.\n- `environments_root`: Defines the location for Spack environments.\n- `build_stage`, `test_stage`, `source_cache`, `misc_cache`: Configure paths for temporary files and caches.\n\n### 4. Create the Spack Modules Configuration File\nWrite the `modules.yaml` file to configure how Spack generates module files.\n\n```bash\ncat <<EOF > ~/.spack/modules.yaml\nmodules:\n  default:\n    roots:\n      tcl: ${SPACK_USER_INSTALL_PATH}/modules\n    enable:\n      - tcl\n    tcl:\n      projections:\n        all: '{name}/{version}'\n      hide_implicits: true\n      all:\n        autoload: direct\n      include:\n        - cowsay\n      exclude: \n        - '%gcc@13.1.0'\n      hash_length: 0\nEOF\n```\n\n:::{.callout-note}\nThe `include` and `exclude` options allow you to control which packages are included or excluded from module generation. For example:\n\n- `include`: Specifies a list of packages to always generate modules for.\n- `exclude`: Specifies a list of packages to never generate modules for.\n\nIn the example above:\n\n- `include: cowsay` ensures that a module is always generated for the `cowsay` package.\n- `exclude: '%gcc@13.1.0'` prevents modules from being generated for packages built with GCC version 13.1.0.\n:::\n\n- `roots`: Specifies the root directory for module files.\n- `projections`: Defines the directory structure for module files.\n- `autoload`: Automatically loads dependencies when a module is loaded.\n- `include` and `exclude`: Control which packages are included or excluded from module generation.\n\n### 5. Confirm the Spack Configuration\nAfter creating the configuration files, confirm that Spack is using the correct paths and settings.\n\nYou can check the current Spack configuration by running:\n\n```{bash}\nspack config get config\n```\n\nTo check the module configuration, run:\n\n```{bash}\nspack config get modules\n```\n\nThis command should display the paths and settings you specified in the `config.yaml` and `modules.yaml` files.\n\nAnother useful command is `spack config blame`, which shows the source of each configuration setting. This can help you identify where specific settings are coming from, especially if you have multiple configuration files or scopes.\n\n```{bash}\nspack config blame\n```\n\nThis command will display the source of each configuration setting, allowing you to verify that your custom settings are being applied correctly."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"spack-setup.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":["cosmo","brand"],"title":"Spack Setup"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}