---
title: "Quick Start Guide"
engine: knitr
execute: 
  freeze: false
---

## Setting Up Your Environment

This section will guide you through the steps to set up your environment, load modules, and verify your setup. Follow these steps to ensure you are ready to use the Compute2 SLURM cluster effectively.

### Launch an Interactive Session

To begin, launch an interactive SLURM session. This ensures that you are not running heavy workloads on the login node.

```bash
srun --time="4:00:00" --nodes=1 --ntasks=4 --mem=24G --pty /bin/bash
```

### Configure Your Environment

#### Set Up the Module Path

Export the custom module path to include user-installed environments:

```bash
export MODULEPATH=/storage2/fs1/dspencer/Active/spencerlab/apps/modules/modulefiles:$MODULEPATH
```

#### Load Core Tools

Load the `labtools` module to access the core tools used in the lab:

```bash
module load labtools
```

### Automate Your Setup (Optional)

To streamline your workflow, you can add the setup commands to your `.bashrc` file. This ensures that the environment is configured automatically upon login.

#### Example `.bashrc` Configuration

```bash
# Export the custom module path
export MODULEPATH=/storage2/fs1/dspencer/Active/spencerlab/apps/modules/modulefiles:$MODULEPATH

# Conditionally load 'labtools' when using VS Code Remote-SSH
if [[ -n "$VSCODE_IPC_HOOK_CLI" ]]; then
  echo "Detected VS Code Remote-SSH session. Loading 'labtools' module..."
  module load labtools
fi
```

### Verify Your Setup

Finally, verify that your environment is correctly configured by checking the version of a core tool like `samtools`:

```{bash}
samtools --version
```

With the `labtools` module loaded, you should now have access to most of the tools available in the Docker base image, as well as R and Python with commonly used packages.

---

## Apptainer Jobs

Apptainer is a container technology designed for high-performance computing environments. It allows you to run containerized applications on the Compute2 SLURM cluster. This section demonstrates how to use Apptainer for a common bioinformatics task.

### Example: Converting BAM to CRAM Using Apptainer

This example shows how to convert a BAM file to a CRAM file using `samtools` within an Apptainer container.

#### Step 1: Download Input Files

First, download the required input files (a BAM file and a reference genome):

```{bash}
mkdir -p ~/test
wget -O ~/test/test.bam https://raw.githubusercontent.com/m-mahgoub/bam2fastq/f9163d85ad8912929b242a08a21d505d84776337/data/SPT5_T0_rep1.sorted.bam
wget -O ~/test/ref.fa https://raw.githubusercontent.com/m-mahgoub/bam2fastq/refs/heads/main/data/genome.fa
```

#### Step 2: Convert BAM to CRAM

Use `srun` and `apptainer exec` to run commands inside the containerized environment. Bind directories to the container using the `--bind` option, and set the `APPTAINER_CACHEDIR` to a writable directory for caching the container image.

```{bash}
module load ris apptainer && \
export APPTAINER_CACHEDIR=/scratch2/fs1/dspencer/mohamed/.apptainer-cache && \
srun --nodelist=c2-bigmem-002 \
    apptainer exec \
    --bind "/home/mmohamed:/home/mmohamed,/storage2/fs1/dspencer/Active:/storage2/fs1/dspencer/Active" \
    docker://ghcr.io/dhslab/docker-baseimage:250222 \
    samtools view -C -T ~/test/ref.fa -o ~/test/test.cram ~/test/test.bam
```

#### Step 3: Verify the CRAM File

Check the contents of the CRAM file to ensure the conversion was successful:

```{bash}
module load ris apptainer && \
export APPTAINER_CACHEDIR=/scratch2/fs1/dspencer/mohamed/.apptainer-cache && \
srun --nodelist=c2-bigmem-002 \
    apptainer exec \
    --bind "/home/mmohamed:/home/mmohamed,/storage2/fs1/dspencer/Active:/storage2/fs1/dspencer/Active" \
    docker://ghcr.io/dhslab/docker-baseimage:250222 \
    samtools view ~/test/test.cram | head -n 1
```

### Additional Notes

- Apptainer supports multiple execution methods, such as `apptainer shell`, `apptainer run`, or directly running from a Docker image (`docker://...`) or a local `.sif` file (e.g., `apptainer exec /path/to/image.sif ...`).
- Differences exist between Apptainer and Docker in handling bind mounts and environment variables. Refer to the [Apptainer documentation](https://apptainer.org/content/user/main/) for more details.

---

## Running a Container Job

This section explains how to run containerized jobs using other container technologies on the Compute2 SLURM cluster.

...content for running container jobs...

---

## Running a JupyterLab Server

Set up and use a JupyterLab server on the Compute2 SLURM cluster for interactive data analysis and visualization.

...content for running JupyterLab server...

---

## Running an RStudio Server

Learn how to set up and use an RStudio server on the Compute2 SLURM cluster for statistical computing and graphics.

...content for running RStudio server...

---

### Additional Resources

For more detailed guides and advanced workflows, explore the following:

- [Module System]()
- [Containers]()
- [Spack](/content/spack/index.qmd)
- [JupyterLab]()
- [RStudio]()
- [VSCode Remote]()